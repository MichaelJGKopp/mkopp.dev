name: mysite_prod
services:
  reverse-proxy:
    image: traefik:v3.5
    command:
      #- "--log.level=DEBUG"
      #- "--api.insecure=true" # Enable the Traefik API/Dashboard
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # only expose services with explicit traefik labels
      - "--entrypoints.web.address=:80"
      # TLS
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--accesslog=true"            # enable access logs
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      # - "8080:8080" # Web UI
    networks:
      - web
      - backend
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Traefik listens to docker events
      - "letsencrypt:/letsencrypt"
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.rule: "${TRAEFIK_DASHBOARD_HTTP_RULE}" # Dashboard route
      traefik.http.routers.api.entrypoints: "websecure"
      traefik.http.routers.api.tls.certresolver: "letsencrypt"
      traefik.http.routers.api.service: "api@internal"
      traefik.http.routers.api.middlewares: "auth" # Apply the authentication middleware
      # Define the Basic Auth Middleware
      traefik.http.middlewares.auth.basicauth.users: "${TRAEFIK_AUTH_USER}" # AUTH Dashboard
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: apps/mysite-frontend/Dockerfile.prod
    environment:
      LOG_REQUESTS: "${LOG_REQUESTS}"
      DEBUG: "${DEBUG}"
    networks:
      - web # So Traefik can reach it
    labels:
      traefik.enable: "true"
      # --- Rule for HTTPS ---
      traefik.http.routers.frontend.rule: "${TRAEFIK_HTTP_RULE}"
      traefik.http.routers.frontend.entrypoints: "websecure"
      traefik.http.routers.frontend.tls.certresolver: "letsencrypt"
      # --- Loadbalancing - Port ---
      traefik.http.services.frontend.loadbalancer.server.port: "4000"
      traefik.docker.network: "web"
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 3

  backend:
    build:
      context: .
      dockerfile: apps/mysite-backend/Dockerfile
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "postgres"
      POSTGRES_PASSWORD_FILE: "/run/secrets/db-password"
    secrets:
      - db-password
    networks:
      - backend
      - database
    depends_on:
      postgres:
        condition: service_healthy  # only starts after postgres is healthy
    labels:
      traefik.enable: "true"
      traefik.http.routers.backend.rule: "${TRAEFIK_HTTP_BACKEND_RULE}"
      traefik.docker.network: "backend"
      # --- Loadbalancing - Port ---
      traefik.http.services.backend.loadbalancer.server.port: "8200"
      # --- Rule for HTTPS ---
      traefik.http.routers.backend.entrypoints: "websecure"
      traefik.http.routers.backend.tls.certresolver: "letsencrypt"
      # AUTH
      traefik.http.routers.backend.middlewares: "auth"
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 3

  postgres:
    image: postgres:16.10-alpine
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD_FILE: "/run/secrets/db-password"
      POSTGRES_DB: "${POSTGRES_DB}"
      PGUSER: "${POSTGRES_USER}"            # Ensure tools default to the right DB user
    secrets:
      - db-password
    ports:
      - "127.0.0.1:5555:5432" # Expose only to localhost for SSH tunneling
    networks:
      - database
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      # Use the intended DB user instead of defaulting to 'root'
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-$${POSTGRES_USER:-postgres}}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

secrets:
  db-password:
    file: "${POSTGRES_PASSWORD_FILE}"

# Isolate database network
networks:
  web:
    driver: bridge
    name: web
  backend:
    driver: bridge
    name: backend
  database:
    driver: bridge
    name: database

volumes:
  letsencrypt:
  db-data:
