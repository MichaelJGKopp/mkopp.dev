name: mysite
services:
  reverse-proxy:
    image: traefik:v3.5
    command:
      #- "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # only expose services with explicit traefik labels
      - "--entrypoints.web.address=:80"
      # TLS
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--accesslog=true"            # enable access logs
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      # - "8080:8080" # Web UI
    networks:
      - web
      - backend
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Traefik listens to docker events
      - "letsencrypt:/letsencrypt"
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.rule: "${TRAEFIK_DASHBOARD_HTTP_RULE}" # Dashboard route
      traefik.http.routers.api.entrypoints: "websecure"
      traefik.http.routers.api.tls.certresolver: "letsencrypt"
      traefik.http.routers.api.service: "api@internal"
      traefik.http.routers.api.middlewares: "auth" # Apply the authentication middleware
      # Define the Basic Auth Middleware
      traefik.http.middlewares.auth.basicauth.users: "${TRAEFIK_AUTH_USER}" # AUTH Dashboard
    restart: unless-stopped

  postgres:
    image: postgres:16.10-alpine
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD_FILE: "/run/secrets/db-password"
      POSTGRES_DB: "${POSTGRES_DB}"
      PGUSER: "${POSTGRES_USER}"            # Ensure tools default to the right DB user
    secrets:
      - db-password
    ports:
      - "127.0.0.1:5555:5432" # Expose only to localhost for SSH tunneling
    networks:
      - database
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      # Use the intended DB user instead of defaulting to 'root'
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-$${POSTGRES_USER:-postgres}}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    image: ${DOCKERHUB_USERNAME}/mysite-backend:${BACKEND_TAG:-latest}
    build:
      context: .
      dockerfile: apps/mysite-backend/Dockerfile
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "postgres"
      POSTGRES_PASSWORD_FILE: "/run/secrets/db-password"
    secrets:
      - db-password
    networks:
      - backend
      - database
    depends_on:
      postgres:
        condition: service_healthy  # only starts after postgres is healthy
    labels:
      #
      # NEW FOR ZERO-DOWNTIME & IP WHITELIST
      traefik.enable: "true"
      traefik.docker.network: "backend"

      # Define a single service for the backend, including health check
      traefik.http.services.backend-svc.loadbalancer.server.port: "8200"
      traefik.http.services.backend-svc.loadbalancer.healthcheck.path: "/management/health/readiness"
      traefik.http.services.backend-svc.loadbalancer.healthcheck.interval: "10s"

      # Define the IP whitelist middleware for internal traffic
      traefik.http.middlewares.internal-ips.ipwhitelist.sourcerange: "10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16"

      # Router 1: Public route for the API, protected by auth.
      traefik.http.routers.backend-public.rule: "${TRAEFIK_HTTP_BACKEND_RULE}"
      traefik.http.routers.backend-public.entrypoints: "websecure"
      traefik.http.routers.backend-public.service: "backend-svc"
      traefik.http.routers.backend-public.tls.certresolver: "letsencrypt"
      traefik.http.routers.backend-public.middlewares: "auth" # ToDo. remove after spring security implemented

      # Router 2: Private route for management endpoints, protected by IP whitelist AND auth.
      traefik.http.routers.backend-private.rule: "(${TRAEFIK_HTTP_BACKEND_RULE}) && PathPrefix(`/management`)"
      traefik.http.routers.backend-private.entrypoints: "websecure"
      traefik.http.routers.backend-private.service: "backend-svc"
      traefik.http.routers.backend-private.tls.certresolver: "letsencrypt"
      traefik.http.routers.backend-private.middlewares: "internal-ips,auth"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/management/health/liveness"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      mode: replicated
      replicas: 3  # Add 3 replicas for zero-downtime
      update_config:
        parallelism: 1        # Only 1 replica updates at a time
        delay: 10s            # 10 seconds between replica updates
        order: start-first    # v2 starts, health check passes, then v1 stops
        failure_action: rollback  # If v2 fails, shut down v2, keep v1 running
    stop_grace_period: 30s

  frontend:
    image: ${DOCKERHUB_USERNAME}/mysite-frontend:${FRONTEND_TAG:-latest}
    build:
      context: .
      dockerfile: apps/mysite-frontend/Dockerfile.prod
    environment:
      LOG_REQUESTS: "${LOG_REQUESTS}"
      DEBUG: "${DEBUG}"
    networks:
      - web # So Traefik can reach it
    labels:
      traefik.enable: "true"
      # --- Rule for HTTPS ---
      traefik.http.routers.frontend.rule: "${TRAEFIK_HTTP_RULE}"
      traefik.http.routers.frontend.entrypoints: "websecure"
      traefik.http.routers.frontend.tls.certresolver: "letsencrypt"
      # --- Loadbalancing - Port ---
      traefik.http.services.frontend.loadbalancer.server.port: "4000"
      traefik.docker.network: "web"
      # Add health checks for zero-downtime
      traefik.http.services.frontend.loadbalancer.healthcheck.path: "/healthz"
      traefik.http.services.frontend.loadbalancer.healthcheck.interval: "10s"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/healthz', (res) => process.exit(res.statusCode == 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      mode: replicated
      replicas: 3  # Increase to 3 for zero-downtime
      update_config:
        parallelism: 1        # Only 1 replica updates at a time
        delay: 10s            # 10 seconds between replica updates
        order: start-first    # v2 starts, health check passes, then v1 stops
        failure_action: rollback  # If v2 fails, shut down v2, keep v1 running
    stop_grace_period: 35s

# Isolate database network
networks:
  web:
    driver: bridge
    name: web
  backend:
    driver: bridge
    name: backend
  database:
    driver: bridge
    name: database

volumes:
  letsencrypt:
  db-data:

secrets:
  db-password:
    file: "${POSTGRES_PASSWORD_FILE}"